{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","components/Icon.js","components/Player.js","components/AddPlayerForm.js","components/App.js","serviceWorker.js","index.js"],"names":["Stats","_ref","players","totalPlayers","length","totalPoints","reduce","total","player","score","react_default","a","createElement","className","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","_this","now","Date","setState","prevState","handleStopwatch","handleReset","_this2","this","intervalID","setInterval","clearInterval","seconds","Math","floor","onClick","Component","Header","title","components_Stats","components_Stopwatch","defaultProps","Counter","changeScore","index","Icon","props","highScore","viewBox","d","transform","width","height","Player","_this$props","id","removePlayer","name","isHighScore","components_Icon","components_Counter","PureComponent","AddPlayerForm","addPlayer","playerInput","React","createRef","onSubmit","e","preventDefault","current","value","currentTarget","reset","type","ref","placeholder","App","highscore","prevPlayerID","handleScoreChange","delta","handleRemovePlayer","filter","p","getHighScore","scores","map","max","apply","Object","toConsumableArray","handleAddPlayer","concat","components_Header","components_Player","key","toString","components_AddPlayerForm","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca1be160.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Stats = ({ players }) => {\n  const totalPlayers = players.length;\n  const totalPoints = players.reduce((total, player) => {\n    return total + player.score;\n  }, 0);\n\n  return (\n    <table className=\"stats\">\n      <tbody>\n        <tr>\n          <td>Players:</td>\n          <td>{totalPlayers}</td>\n        </tr>\n        <tr>\n          <td>Total Points:</td>\n          <td>{totalPoints}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nStats.propTypes = {\n  players: PropTypes.arrayOf(\n    PropTypes.shape({\n      score: PropTypes.number\n    })\n  )\n};\n\nexport default Stats;\n","import React, { Component } from \"react\";\n\nclass Stopwatch extends Component {\n  state = {\n    isRunning: false,\n    elapsedTime: 0,\n    previousTime: 0\n  };\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => {\n      this.tick();\n    }, 100);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  tick = () => {\n    if (this.state.isRunning) {\n      const now = Date.now();\n      this.setState(prevState => ({\n        previousTime: now,\n        elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\n      }));\n    }\n  };\n\n  handleStopwatch = () => {\n    this.setState(prevState => ({\n      isRunning: !this.state.isRunning\n    }));\n    if (!this.state.isRunning) {\n      this.setState({ previousTime: Date.now() });\n    }\n  };\n\n  handleReset = () => {\n    this.setState({ elapsedTime: 0 });\n  };\n\n  render() {\n    const seconds = Math.floor(this.state.elapsedTime / 1000);\n    return (\n      <div className=\"stopwatch\">\n        <h2>Stopwatch</h2>\n        <span className=\"stopwatch-time\">{seconds}</span>\n        <button onClick={this.handleStopwatch}>\n          {this.state.isRunning ? \"Stop\" : \"Start\"}\n        </button>\n        <button onClick={this.handleReset}>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Stopwatch;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Stats from \"./Stats\";\nimport Stopwatch from \"./Stopwatch\";\n\nconst Header = ({ players, title }) => {\n  return (\n    <header>\n      <Stats players={players} />\n      <h1>{title}</h1>\n      <Stopwatch />\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  title: PropTypes.string,\n  players: PropTypes.arrayOf(PropTypes.object)\n};\n\nHeader.defaultProps = {\n  title: \"Scoreboard\"\n};\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Counter = ({ changeScore, score, index }) => {\n  return (\n    <div className=\"counter\">\n      <button\n        className=\"counter-action decrement\"\n        onClick={() => changeScore(index, -1)}\n      >\n        -\n      </button>\n      <span className=\"counter-score\">{score}</span>\n      <button\n        className=\"counter-action increment\"\n        onClick={() => changeScore(index, +1)}\n      >\n        +\n      </button>\n    </div>\n  );\n};\n\nCounter.propTypes = {\n  index: PropTypes.number,\n  score: PropTypes.number,\n  changeScore: PropTypes.func\n};\nexport default Counter;\n","// Icon.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Icon = props => {\n  return (\n    <svg\n      className={props.highScore ? \"is-high-score\" : null}\n      viewBox=\"0 0 44 35\"\n    >\n      <path\n        d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\"\n        transform=\"translate(0 0.301727)\"\n      />\n      <rect\n        width=\"30.4986\"\n        height=\"3.07759\"\n        transform=\"translate(6.56987 31.5603)\"\n      />\n    </svg>\n  );\n};\n\nIcon.propTypes = {\n  isHighScore: PropTypes.bool\n};\n\nexport default Icon;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Counter from \"./Counter\";\nimport Icon from \"./Icon\";\n\nclass Player extends PureComponent {\n  static propTypes = {\n    changeScore: PropTypes.func,\n    removePlayer: PropTypes.func,\n    name: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    id: PropTypes.number,\n    index: PropTypes.number,\n    isHighScore: PropTypes.bool\n  };\n\n  render() {\n    const {\n      id,\n      score,\n      index,\n      removePlayer,\n      changeScore,\n      name,\n      isHighScore\n    } = this.props;\n\n    return (\n      <div className=\"player\">\n        <span className=\"player-name\">\n          <button className=\"remove-player\" onClick={() => removePlayer(id)}>\n            ✖\n          </button>\n          <Icon highScore={isHighScore} />\n          {name}\n        </span>\n\n        <Counter score={score} changeScore={changeScore} index={index} />\n      </div>\n    );\n  }\n}\n\nexport default Player;\n","import React from \"react\";\n\nconst AddPlayerForm = ({ addPlayer }) => {\n  let playerInput = React.createRef();\n  let handleSubmit = e => {\n    e.preventDefault();\n    addPlayer(playerInput.current.value);\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        ref={playerInput}\n        placeholder=\"Enter a player's name\"\n      />\n\n      <input type=\"submit\" value=\"Add Player\" />\n    </form>\n  );\n};\n\nexport default AddPlayerForm;\n","import React, { Component } from \"react\";\n\nimport Header from \"./Header\";\nimport Player from \"./Player\";\nimport AddPlayerForm from \"./AddPlayerForm\";\n\nclass App extends Component {\n  state = {\n    players: [\n      {\n        name: \"Guil\",\n        score: 0,\n        id: 1,\n        highscore: false\n      },\n      {\n        name: \"Treasure\",\n        score: 0,\n        id: 2,\n        highscore: false\n      },\n      {\n        name: \"Ashley\",\n        score: 0,\n        id: 3,\n        highscore: false\n      },\n      {\n        name: \"James\",\n        score: 0,\n        id: 4,\n        highscore: false\n      }\n    ]\n  };\n\n  prevPlayerID = 4;\n\n  handleScoreChange = (index, delta) => {\n    this.setState(prevState => ({\n      score: (prevState.players[index].score += delta)\n    }));\n  };\n\n  handleRemovePlayer = id => {\n    this.setState(prevState => {\n      return {\n        players: prevState.players.filter(p => p.id !== id)\n      };\n    });\n  };\n\n  getHighScore = () => {\n    const scores = this.state.players.map(p => p.score);\n    const highScore = Math.max(...scores);\n    if (highScore) {\n      return highScore;\n    }\n    return null;\n  };\n\n  handleAddPlayer = name => {\n    this.setState(prevState => {\n      return {\n        players: [\n          ...prevState.players,\n          {\n            name,\n            score: 0,\n            id: (this.prevPlayerID += 1),\n            highscore: false\n          }\n        ]\n      };\n    });\n  };\n\n  render() {\n    const highScore = this.getHighScore();\n    return (\n      <div className=\"scoreboard\">\n        <Header title=\"Scoreboard\" players={this.state.players} />\n\n        {/* Players list */}\n        {this.state.players.map((player, index) => (\n          <Player\n            name={player.name}\n            id={player.id}\n            index={index}\n            score={player.score}\n            key={player.id.toString()}\n            removePlayer={this.handleRemovePlayer}\n            changeScore={this.handleScoreChange}\n            isHighScore={highScore === player.score}\n          />\n        ))}\n        <AddPlayerForm addPlayer={this.handleAddPlayer} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}