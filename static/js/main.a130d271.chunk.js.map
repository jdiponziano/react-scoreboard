{"version":3,"sources":["components/Context/index.js","components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","components/Icon.js","components/Player.js","components/PlayerList.js","components/AddPlayerForm.js","components/App.js","serviceWorker.js","index.js"],"names":["ScoreboardContext","React","createContext","Provider","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","players","name","score","id","highscore","prevPlayerID","handleScoreChange","index","delta","setState","prevState","handleRemovePlayer","filter","p","getHighScore","scores","map","highScore","Math","max","toConsumableArray","handleAddPlayer","inherits","createClass","key","value","react_default","a","createElement","actions","changeScore","removePlayer","addPlayer","props","children","Component","Consumer","Stats","_ref","totalPlayers","totalPoints","reduce","total","player","className","Stopwatch","isRunning","elapsedTime","previousTime","tick","now","Date","handleStopwatch","handleReset","_this2","intervalID","setInterval","clearInterval","seconds","floor","onClick","Header","context","components_Stats","components_Stopwatch","Counter","_ref2","Icon","viewBox","d","transform","width","height","Player","components_Icon","components_Counter","PureComponent","PlayerList","Fragment","components_Player","toString","isHighScore","AddPlayerForm","playerInput","createRef","onSubmit","e","preventDefault","current","currentTarget","reset","type","ref","placeholder","App","components_Header","components_PlayerList","components_AddPlayerForm","Boolean","window","location","hostname","match","ReactDOM","render","Context_Provider","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a130d271.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst ScoreboardContext = React.createContext();\n\nexport class Provider extends Component {\n\n  state = {\n    players: [\n      {\n        name: \"Guil\",\n        score: 0,\n        id: 1,\n        highscore: false\n      },\n      {\n        name: \"Treasure\",\n        score: 0,\n        id: 2,\n        highscore: false\n      },\n      {\n        name: \"Ashley\",\n        score: 0,\n        id: 3,\n        highscore: false\n      },\n      {\n        name: \"James\",\n        score: 0,\n        id: 4,\n        highscore: false\n      }\n    ]\n  };\n\n  prevPlayerID = 4;\n\n  handleScoreChange = (index, delta) => {\n    this.setState(prevState => ({\n      score: (prevState.players[index].score += delta)\n    }));\n  };\n\n  handleRemovePlayer = id => {\n    this.setState(prevState => {\n      return {\n        players: prevState.players.filter(p => p.id !== id)\n      };\n    });\n  };\n\n  getHighScore = () => {\n    const scores = this.state.players.map(p => p.score);\n    const highScore = Math.max(...scores);\n    if (highScore) {\n      return highScore;\n    }\n    return null;\n  };\n\n  handleAddPlayer = name => {\n    this.setState(prevState => {\n      return {\n        players: [\n          ...prevState.players,\n          {\n            name,\n            score: 0,\n            id: (this.prevPlayerID += 1),\n            highscore: false\n          }\n        ]\n      };\n    });\n  };\n\n  render() {\n    return (\n      <ScoreboardContext.Provider value={{\n        players: this.state.players,\n        actions: {\n          changeScore: this.handleScoreChange,\n          removePlayer: this.handleRemovePlayer,\n          addPlayer: this.handleAddPlayer,\n          highScore: this.getHighScore()\n        }\n      }}>\n        {this.props.children}\n      </ScoreboardContext.Provider>\n    );\n  }\n};\nexport const Consumer = ScoreboardContext.Consumer;\n","import React from \"react\";\nimport { Consumer } from \"./Context\";\n\nconst Stats = () => {\n  return (\n    <Consumer>\n      {({ players }) => {\n        const totalPlayers = players.length;\n        const totalPoints = players.reduce((total, player) => {\n          return total + player.score;\n        }, 0);\n        return (\n          <table className=\"stats\">\n            <tbody>\n              <tr>\n                <td>Players:</td>\n                <td>{totalPlayers}</td>\n              </tr>\n              <tr>\n                <td>Total Points:</td>\n                <td>{totalPoints}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      }}\n    </Consumer>\n  );\n};\n\nexport default Stats;\n","import React, { Component } from \"react\";\n\nclass Stopwatch extends Component {\n  state = {\n    isRunning: false,\n    elapsedTime: 0,\n    previousTime: 0\n  };\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => {\n      this.tick();\n    }, 100);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  tick = () => {\n    if (this.state.isRunning) {\n      const now = Date.now();\n      this.setState(prevState => ({\n        previousTime: now,\n        elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\n      }));\n    }\n  };\n\n  handleStopwatch = () => {\n    this.setState(prevState => ({\n      isRunning: !this.state.isRunning\n    }));\n    if (!this.state.isRunning) {\n      this.setState({ previousTime: Date.now() });\n    }\n  };\n\n  handleReset = () => {\n    this.setState({ elapsedTime: 0 });\n  };\n\n  render() {\n    const seconds = Math.floor(this.state.elapsedTime / 1000);\n    return (\n      <div className=\"stopwatch\">\n        <h2>Stopwatch</h2>\n        <span className=\"stopwatch-time\">{seconds}</span>\n        <button onClick={this.handleStopwatch}>\n          {this.state.isRunning ? \"Stop\" : \"Start\"}\n        </button>\n        <button onClick={this.handleReset}>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Stopwatch;\n","import React from \"react\";\nimport { Consumer } from \"./Context\";\nimport Stats from \"./Stats\";\nimport Stopwatch from \"./Stopwatch\";\n\nconst Header = () => {\n  return (\n    <Consumer>\n      {context => {\n        return (\n          <header>\n            <Stats />\n            <h1>Scoreboard</h1>\n            <Stopwatch />\n          </header>\n        );\n      }}\n    </Consumer>\n  );\n\n};\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Consumer } from './Context';\n\nconst Counter = ({ index }) => {\n  return (\n    <Consumer>\n      {({ actions, players }) => (\n        <div className=\"counter\">\n          <button\n            className=\"counter-action decrement\"\n            onClick={() => actions.changeScore(index, -1)}\n          >-</button>\n          <span className=\"counter-score\">{players[index].score}</span>\n          <button\n            className=\"counter-action increment\"\n            onClick={() => actions.changeScore(index, +1)}\n          >+</button>\n        </div>\n      )}\n    </Consumer>\n\n  );\n};\n\nCounter.propTypes = {\n  index: PropTypes.number\n};\nexport default Counter;\n","// Icon.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Icon = props => {\n  return (\n    <svg\n      className={props.highScore ? \"is-high-score\" : null}\n      viewBox=\"0 0 44 35\"\n    >\n      <path\n        d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\"\n        transform=\"translate(0 0.301727)\"\n      />\n      <rect\n        width=\"30.4986\"\n        height=\"3.07759\"\n        transform=\"translate(6.56987 31.5603)\"\n      />\n    </svg>\n  );\n};\n\nIcon.propTypes = {\n  isHighScore: PropTypes.bool\n};\n\nexport default Icon;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Counter from \"./Counter\";\nimport { Consumer } from \"./Context\";\nimport Icon from \"./Icon\";\n\nclass Player extends PureComponent {\n  static propTypes = {\n    index: PropTypes.number\n  };\n\n  render() {\n    const { index } = this.props;\n\n    return (\n      <div className=\"player\">\n        <Consumer>\n          {({ actions, players }) => (\n            <span className=\"player-name\">\n              <button className=\"remove-player\" onClick={() => actions.removePlayer(players[index].id)}>\n                ✖\n              </button>\n              <Icon highScore={actions.highScore === players[index].score} />\n              {players[index].name}\n            </span>\n          )}\n        </Consumer>\n\n        <Counter index={index} />\n      </div>\n    );\n  }\n}\n\nexport default Player;\n","import React from 'react';\nimport Player from \"./Player\";\nimport { Consumer } from './Context';\n\nconst PlayerList = () => {\n  return (\n    <Consumer>\n      {({ actions, players }) => (\n        <React.Fragment>\n          {players.map((player, index) =>\n            <Player\n              key={player.id.toString()}\n              index={index}\n              isHighScore={actions.highScore === player.score}\n            />\n          )}\n        </React.Fragment>\n      )}\n    </Consumer>\n  );\n}\n\nexport default PlayerList;","import React from \"react\";\nimport { Consumer } from './Context';\n\nconst AddPlayerForm = () => {\n  let playerInput = React.createRef();\n\n  return (\n    <Consumer>\n      {({ actions }) => {\n        let handleSubmit = e => {\n          e.preventDefault();\n          actions.addPlayer(playerInput.current.value);\n          e.currentTarget.reset();\n        };\n\n        return (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              ref={playerInput}\n              placeholder=\"Enter a player's name\"\n            />\n            <input type=\"submit\" value=\"Add Player\" />\n          </form>\n        );\n      }}\n    </Consumer>\n  );\n};\n\nexport default AddPlayerForm;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport PlayerList from \"./PlayerList\";\nimport AddPlayerForm from \"./AddPlayerForm\";\n\nconst App = () => {\n  return (\n    <div className=\"scoreboard\">\n      <Header />\n      <PlayerList />\n      <AddPlayerForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"./components/Context\";\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}